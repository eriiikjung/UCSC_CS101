// Rahul Palamuttam
class List {
    class Node {
	int data;
	Node prev;
	Node next;
	
	//first constructor for first node
	Node(int num){
	    data = num;
	    prev = null;
	    next = null;
	}

	// useful for inserting a new node
	Node(int num, Node previous, Node after){
	    data = num;
	    prev = previous;
	    next = after;
	}

	public String toString(){
	    return "" + data;
	}
    }
    
    public static final Node OFF = null;
    private Node cursor;
    private Node front;
    private Node back;
    private int length;
    
    // Creates a new empty list
    public List (){
	cursor = OFF;
	front = null;
	back = null;
	length = 0;
    }

    // Returns number of elements in list
    public int length() {
	return length;
    }
    
    // Returns the index of the cursor element
    // or -1 if undefined
    public int getIndex(){
	int index = -1;
	if (cursor == OFF) return index;
	for (Node tmp = front; tmp != null; tmp = tmp.next){
	    index++;
	    if (tmp == cursor) break;
	}
	return index;   
    }
    
    // Returns front element if length > 0
    public int front() {
	if (length() > 0) {
	    return front.data;
	} 
	  
	return -1;
    }

    // Returns back element if length > 0
    public int back() {
	if (length() > 0){
	    return back.data;
	}

	return -1;
	
    }
    
    // Returns cursor element in this list
    public int getElement(){
	if (length() > 0 && getIndex() >= 0) return cursor.data;
	return -1;
    }

    //Returns true if this List and L are same integer sequence
    public boolean equals(List L){
	Node right = front;
	Node left = L.front;
	// checks if corresponding indices are incorrect
	while (right != null && left != null){
	    if (right.data != left.data) return false;
	    right = right.next;
	    left = left.next;
	}
	return true;
    }

    // Re-sets this List to the empty state
    public void clear(){
	cursor = OFF;
	front = null;
	back = null;
	length = 0;
    }
    
    public void moveTo(int i){
	if (i >= 0 && i <= length() - 1){
	    cursor = front;
	    for(; i > 0; i--) cursor = cursor.next;
	} else {
	    cursor = OFF;
	}
    }
    
    // this operation is equivalent to moveTo(getIndex() -1)
    // it is much more efficient, since it doesn't traverse
    // the list each time
    public void movePrev(){
	int index = getIndex();
	if (index > 0 && index <= length() - 1){
	    cursor = cursor.prev;
	} else {
	    cursor = OFF;
	}
    }

    // like movePrev() but moves the cursor one step backward
    public void moveNext(){
	int index = getIndex();
	if(index >= 0 && index < length() - 1){
	    cursor = cursor.next;
	} 
    }
    
    // prepends to the list
    public void prepend(int data){
	Node node = new Node(data,null, front);
	front.prev = node;
	front = node;
    }

    // appends to the list
    public void append(int data){
	Node node = new Node(data, back, null);
	back.next = node;
	back = node;
    }
    
    // inserts an element before the cursor
    public void insertBefore(int data){
	if (!(length() >0 && getIndex() >=0)) return;
	Node node = new Node(data, cursor.prev, cursor);
	// make sure node exists before cursor
	// if the cursor is the front node
	// front must be changed accordingly
	if (cursor.prev != null) {
	    cursor.prev.next = node;
	} else {
	    front = node;
	}

	cursor.prev = node;
    }
    
    public void insertAfter(int data){
	if(!(length() >0 && getIndex() >=0)) return;
	Node node = new Node(data, cursor, cursor.next);
	// make sure node exists after cursor
	// if the cursor is the back node
	// back must be changed to the new node
	if (cursor.next != null){
	    cursor.next.prev = node;
	} else {
	    back = node;
	}

	cursor.next = node;
    }

    // deletes the front node
    public void deleteFront(){
	if (length() > 0) {
	    // if the cursor happens to be the front node
	    // then it must be set to OFF
	    if(cursor == front) cursor == OFF;
	    front = front.next;
	}
    }

    public void deleteBack(){
	if (length() > 0) {}}{
adfsdasdsasaddsaasfdsdfdsffdweasdasdsad
    }

}