head	1.2;
access;
symbols;
locks;
comment	@ * @;


1.2
date	2014.03.10.08.30.05;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.03.10.08.27.07;	author -;	state -;
branches;
next	;


desc
@@


1.2
log
@-
@
text
@//Rahul Palamuttam, rpalamut@@ucsc.edu
// Programming Assignment 5
// $Id: List.h,v 1.1 2014-03-10 01:27:07-07 - - $

#ifndef __LIST_H__
#define __LIST_H__

#include <stdio.h>

typedef struct ListObj* List;

//Constructors-Destructors ------------------------------------
List newList(void);
void freeList(List* pL);

// Access functions -------------------------
// Returns number of elements in this list
int length(List L);
// returns -1 if cursor element is undefined
int getIndex(List L);
// returns front element in list. Pre: length() > 0
int front(List L);
// returns back element in this list. Pre: length() > 0
int back(List L);
// returns cursor element in this list
//pre : length() > 0, getIndex() >=0
int getElement(List L);

int equals(List A, List B);

//Manipulation procedures -------------------------------------
void clear (List L);
// if 0 <= i <= length() -1, moves cursor to element
void moveTo(List L, int i);
// if 0 < i <= length() -1, moves cursor to previous element
void movePrev(List L);
// if 0 <= i < length() -1, moves cursor to next element
void moveNext(List L);
void prepend(List L, int data);
void append(List L, int data);
// Pre: length() > 0, getIndex() >= 0
void insertBefore(List L, int data);
// Pre: length() > =, getIndex() >= 0
void insertAfter(List L, int data);
// Pre: length() > 0
void deleteFront(List L);
// Pre: length () > 0
void deleteBack(List L);
// Pre: length () > 0, getIndex() >= 0
void delete(List L);

//Other operations -------------------------------------------------
void printList (FILE* out, List L);
List copyList(List L);

#endif
@


1.1
log
@-
@
text
@d2 2
a3 2
// Programming Assignment 4
// $Id: List.h,v 1.1 2014-02-24 03:01:43-08 - - $
@
